{"ast":null,"code":"var _jsxFileName = \"/Users/tongfeiguo/2022/spring/webdev/web-dev/src/components/Labs/ReduxExamples/components/todos.js\",\n    _s = $RefreshSig$();\n\n/*\n// import useState to work with local state\nimport React, {useState} from \"react\";\n// import the hook\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    // create todos local state variable initialized + add done property\n    const [todo, setTodo] = useState({do: '', done: false});\n    // create a dispatch\n    const dispatch = useDispatch();\n    // handle checkbox click\n    const updateTodoClickHandler = (todo) => {\n        const action = {\n            type: 'update-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle create click event\n    const createTodoClickHandler = () => {\n        // create action object\n        const action = {\n            type: 'create-todo', // required action type\n            todo\n        };\n        dispatch(action); // send action to reducers\n    }\n    // delete todos event handler accepts todo\n    const deleteTodoClickHandler = (todo) => {\n        const action = {\n            type: 'delete-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        // get data from input field\n        const doValue = event.target.value;\n        // create new todos object instance\n        const newTodo = {\n            do: doValue // setting the todos do property\n        };\n        setTodo(newTodo); // change local state todos variable\n    }\n    return (\n        <ul className=\"list-group\">\n            {/!*add a new line item at the top*!/}\n            <li className=\"list-group-item\">\n                <input checked={todo.done}\n                       onChange={(event) =>\n                           updateTodoClickHandler(\n                               {...todo,\n                                   done: event.target.checked})}\n                       type=\"checkbox\"/>\n    \n                <input\n                    onChange={todoChangeHandler}\n                    value={todo.do}\n                    className=\"form-control\"/>\n                {/!*create button notifies event handler when*!/}\n                <button onClick={createTodoClickHandler}\n                        className=\"btn btn-primary\">\n                    Create New Todo\n                </button>\n                <button onClick={() =>\n                    deleteTodoClickHandler(todo)}\n                        className=\"btn btn-danger float-end\">\n                    Delete\n                </button>\n\n            </li>\n        </ul>\n    );\n};\nexport default Todos;\n\n*/\n\n/*Version 1: uses useSelector to retrieve the todos generated by the todos.js reducer*/\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Todos = () => {\n  _s();\n\n  const todos = useSelector(state => state.todos);\n  const [todo, setTodo] = useState({\n    do: ''\n  }); // create todos local state variable initialized\n  // handle keystroke changes in input field\n\n  const todoChangeHandler = event => {\n    const doValue = event.target.value;\n    const newTodo = {\n      do: doValue\n    }; // change local state todo variable\n\n    setTodo(newTodo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: todo.do\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Todos, \"yForM/7W5q33c7Q/pLtkeqGWU64=\", false, function () {\n  return [useSelector];\n});\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/tongfeiguo/2022/spring/webdev/web-dev/src/components/Labs/ReduxExamples/components/todos.js"],"names":["React","useState","useSelector","Todos","todos","state","todo","setTodo","do","todoChangeHandler","event","doValue","target","value","newTodo","map"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,aAA1B;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,KAAK,GAAGF,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB;AAEA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC;AAACO,IAAAA,EAAE,EAAE;AAAL,GAAD,CAAhC,CAHgB,CAG4B;AAC5C;;AACA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,UAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACA,UAAMC,OAAO,GAAG;AACZN,MAAAA,EAAE,EAAEG;AADQ,KAAhB,CAFiC,CAKjC;;AACAJ,IAAAA,OAAO,CAACO,OAAD,CAAP;AACH,GAPD;;AASA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAEQV,KAAK,CAACW,GAAN,CAAUT,IAAI,iBACV;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,kBACKA,IAAI,CAACE;AADV;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAcH,CA5BD;;GAAML,K;UACYD,W;;;KADZC,K;AA6BN,eAAeA,KAAf","sourcesContent":["/*\n// import useState to work with local state\nimport React, {useState} from \"react\";\n// import the hook\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    // create todos local state variable initialized + add done property\n    const [todo, setTodo] = useState({do: '', done: false});\n    // create a dispatch\n    const dispatch = useDispatch();\n    // handle checkbox click\n    const updateTodoClickHandler = (todo) => {\n        const action = {\n            type: 'update-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle create click event\n    const createTodoClickHandler = () => {\n        // create action object\n        const action = {\n            type: 'create-todo', // required action type\n            todo\n        };\n        dispatch(action); // send action to reducers\n    }\n    // delete todos event handler accepts todo\n    const deleteTodoClickHandler = (todo) => {\n        const action = {\n            type: 'delete-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        // get data from input field\n        const doValue = event.target.value;\n        // create new todos object instance\n        const newTodo = {\n            do: doValue // setting the todos do property\n        };\n        setTodo(newTodo); // change local state todos variable\n    }\n    return (\n        <ul className=\"list-group\">\n            {/!*add a new line item at the top*!/}\n            <li className=\"list-group-item\">\n                <input checked={todo.done}\n                       onChange={(event) =>\n                           updateTodoClickHandler(\n                               {...todo,\n                                   done: event.target.checked})}\n                       type=\"checkbox\"/>\n    \n                <input\n                    onChange={todoChangeHandler}\n                    value={todo.do}\n                    className=\"form-control\"/>\n                {/!*create button notifies event handler when*!/}\n                <button onClick={createTodoClickHandler}\n                        className=\"btn btn-primary\">\n                    Create New Todo\n                </button>\n                <button onClick={() =>\n                    deleteTodoClickHandler(todo)}\n                        className=\"btn btn-danger float-end\">\n                    Delete\n                </button>\n\n            </li>\n        </ul>\n    );\n};\nexport default Todos;\n\n*/\n\n/*Version 1: uses useSelector to retrieve the todos generated by the todos.js reducer*/\nimport React, {useState} from \"react\";\nimport {useSelector} from \"react-redux\";\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    \n    const [todo, setTodo] = useState({do: ''}); // create todos local state variable initialized\n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        const doValue = event.target.value;\n        const newTodo = {\n            do: doValue\n        };\n        // change local state todo variable\n        setTodo(newTodo);\n    }\n    \n    return(\n        <>\n            <h3>Todos</h3>\n            <ul className=\"list-group\">\n                {\n                    todos.map(todo =>\n                        <li className=\"list-group-item\">\n                            {todo.do}\n                        </li>\n                    )\n                }\n            </ul>\n        </>\n    );\n};\nexport default Todos;\n\n"]},"metadata":{},"sourceType":"module"}