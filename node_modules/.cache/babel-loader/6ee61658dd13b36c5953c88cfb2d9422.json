{"ast":null,"code":"var _jsxFileName = \"/Users/tongfeiguo/2022/spring/webdev/web-dev/src/components/Labs/ReduxExamples/components/todos.js\",\n    _s = $RefreshSig$();\n\n/*\n// import useState to work with local state\nimport React, {useState} from \"react\";\n// import the hook\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    // create todos local state variable initialized + add done property\n    const [todo, setTodo] = useState({do: '', done: false});\n    // create a dispatch\n    const dispatch = useDispatch();\n    // handle checkbox click\n    const updateTodoClickHandler = (todo) => {\n        const action = {\n            type: 'update-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle create click event\n    const createTodoClickHandler = () => {\n        // create action object\n        const action = {\n            type: 'create-todo', // required action type\n            todo\n        };\n        dispatch(action); // send action to reducers\n    }\n    // delete todos event handler accepts todo\n    const deleteTodoClickHandler = (todo) => {\n        const action = {\n            type: 'delete-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        // get data from input field\n        const doValue = event.target.value;\n        // create new todos object instance\n        const newTodo = {\n            do: doValue // setting the todos do property\n        };\n        setTodo(newTodo); // change local state todos variable\n    }\n    return (\n        <ul className=\"list-group\">\n            {/!*add a new line item at the top*!/}\n            <li className=\"list-group-item\">\n                <input checked={todo.done}\n                       onChange={(event) =>\n                           updateTodoClickHandler(\n                               {...todo,\n                                   done: event.target.checked})}\n                       type=\"checkbox\"/>\n    \n                <input\n                    onChange={todoChangeHandler}\n                    value={todo.do}\n                    className=\"form-control\"/>\n                {/!*create button notifies event handler when*!/}\n                <button onClick={createTodoClickHandler}\n                        className=\"btn btn-primary\">\n                    Create New Todo\n                </button>\n                <button onClick={() =>\n                    deleteTodoClickHandler(todo)}\n                        className=\"btn btn-danger float-end\">\n                    Delete\n                </button>\n\n            </li>\n        </ul>\n    );\n};\nexport default Todos;\n\n*/\n\n/*Version 1: uses useSelector to retrieve the todos generated by the todos.js reducer*/\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Todos = () => {\n  _s();\n\n  const todos = useSelector(state => state.todos); // 1 basic state\n  // create todos local state variable initialized and eidt by adding done value\n\n  const [todo, setTodo] = useState({\n    do: '',\n    done: false\n  }); // handle keystroke changes in input field\n\n  const todoChangeHandler = event => {\n    const doValue = event.target.value;\n    const newTodo = {\n      do: doValue\n    }; // change local state todo variable\n\n    setTodo(newTodo);\n  }; // 2 create a dispatch\n\n\n  const dispatch = useDispatch(); // handle create click event\n\n  const createTodoClickHandler = () => {\n    const action = {\n      type: 'create-todo',\n      todo\n    }; // send action to reducers\n\n    dispatch(action);\n  }; // 3 delete todos event handler accepts todo\n\n\n  const deleteTodoClickHandler = todo => {\n    // create new action\n    const action = {\n      type: 'delete-todo',\n      todo\n    };\n    dispatch(action);\n  }; // 4 handle checkbox click\n\n\n  const updateTodoClickHandler = todo => {\n    const action = {\n      type: 'update-todo',\n      todo\n    };\n    dispatch(action);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: todoChangeHandler,\n          value: todo.do,\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createTodoClickHandler,\n          className: \"btn btn-primary\",\n          children: \"Create New Todos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTodoClickHandler(todo),\n          className: \"btn btn-danger float-end\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          checked: todo.done,\n          onChange: event => updateTodoClickHandler({ ...todo,\n            done: event.target.checked\n          }),\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }, this), todo.do]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Todos, \"lQPkXYq0HDkHAykpMxmm9w9YMNM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/tongfeiguo/2022/spring/webdev/web-dev/src/components/Labs/ReduxExamples/components/todos.js"],"names":["React","useState","useDispatch","useSelector","Todos","todos","state","todo","setTodo","do","done","todoChangeHandler","event","doValue","target","value","newTodo","dispatch","createTodoClickHandler","action","type","deleteTodoClickHandler","updateTodoClickHandler","map","checked"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,KAAK,GAAGF,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB,CADgB,CAEhB;AACA;;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;AAACQ,IAAAA,EAAE,EAAE,EAAL;AAASC,IAAAA,IAAI,EAAE;AAAf,GAAD,CAAhC,CAJgB,CAKhB;;AACA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,UAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACA,UAAMC,OAAO,GAAG;AACZP,MAAAA,EAAE,EAAEI;AADQ,KAAhB,CAFiC,CAKjC;;AACAL,IAAAA,OAAO,CAACQ,OAAD,CAAP;AACH,GAPD,CANgB,CAchB;;;AACA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B,CAfgB,CAgBhB;;AACA,QAAMgB,sBAAsB,GAAG,MAAM;AACjC,UAAMC,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,aADK;AAEXb,MAAAA;AAFW,KAAf,CADiC,CAKjC;;AACAU,IAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,GAPD,CAjBgB,CAyBhB;;;AACA,QAAME,sBAAsB,GAAId,IAAD,IAAU;AACrC;AACA,UAAMY,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,aADK;AAEXb,MAAAA;AAFW,KAAf;AAIAU,IAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,GAPD,CA1BgB,CAkChB;;;AACA,QAAMG,sBAAsB,GAAIf,IAAD,IAAU;AACrC,UAAMY,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,aADK;AAEXb,MAAAA;AAFW,KAAf;AAIAU,IAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,GAND;;AAQA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,8BAEI;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,gCACI;AACI,UAAA,QAAQ,EAAER,iBADd;AAEI,UAAA,KAAK,EAAEJ,IAAI,CAACE,EAFhB;AAGI,UAAA,SAAS,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAQ,UAAA,OAAO,EAAES,sBAAjB;AACQ,UAAA,SAAS,EAAC,iBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAYI;AAAQ,UAAA,OAAO,EAAE,MACbG,sBAAsB,CAACd,IAAD,CAD1B;AAEQ,UAAA,SAAS,EAAC,0BAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAuBQF,KAAK,CAACkB,GAAN,CAAUhB,IAAI,iBACV;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,gCAEI;AAAO,UAAA,OAAO,EAAEA,IAAI,CAACG,IAArB;AACO,UAAA,QAAQ,EAAGE,KAAD,IACNU,sBAAsB,CAClB,EAAC,GAAGf,IAAJ;AACIG,YAAAA,IAAI,EAAEE,KAAK,CAACE,MAAN,CAAaU;AADvB,WADkB,CAFjC;AAKO,UAAA,IAAI,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAQKjB,IAAI,CAACE,EARV;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAvBR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AA0CH,CArFD;;GAAML,K;UACYD,W,EAcGD,W;;;KAffE,K;AAsFN,eAAeA,KAAf","sourcesContent":["/*\n// import useState to work with local state\nimport React, {useState} from \"react\";\n// import the hook\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    // create todos local state variable initialized + add done property\n    const [todo, setTodo] = useState({do: '', done: false});\n    // create a dispatch\n    const dispatch = useDispatch();\n    // handle checkbox click\n    const updateTodoClickHandler = (todo) => {\n        const action = {\n            type: 'update-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle create click event\n    const createTodoClickHandler = () => {\n        // create action object\n        const action = {\n            type: 'create-todo', // required action type\n            todo\n        };\n        dispatch(action); // send action to reducers\n    }\n    // delete todos event handler accepts todo\n    const deleteTodoClickHandler = (todo) => {\n        const action = {\n            type: 'delete-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        // get data from input field\n        const doValue = event.target.value;\n        // create new todos object instance\n        const newTodo = {\n            do: doValue // setting the todos do property\n        };\n        setTodo(newTodo); // change local state todos variable\n    }\n    return (\n        <ul className=\"list-group\">\n            {/!*add a new line item at the top*!/}\n            <li className=\"list-group-item\">\n                <input checked={todo.done}\n                       onChange={(event) =>\n                           updateTodoClickHandler(\n                               {...todo,\n                                   done: event.target.checked})}\n                       type=\"checkbox\"/>\n    \n                <input\n                    onChange={todoChangeHandler}\n                    value={todo.do}\n                    className=\"form-control\"/>\n                {/!*create button notifies event handler when*!/}\n                <button onClick={createTodoClickHandler}\n                        className=\"btn btn-primary\">\n                    Create New Todo\n                </button>\n                <button onClick={() =>\n                    deleteTodoClickHandler(todo)}\n                        className=\"btn btn-danger float-end\">\n                    Delete\n                </button>\n\n            </li>\n        </ul>\n    );\n};\nexport default Todos;\n\n*/\n\n/*Version 1: uses useSelector to retrieve the todos generated by the todos.js reducer*/\nimport React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Todos = () => {\n    const todos = useSelector(state => state.todos);\n    // 1 basic state\n    // create todos local state variable initialized and eidt by adding done value\n    const [todo, setTodo] = useState({do: '', done: false});\n    // handle keystroke changes in input field\n    const todoChangeHandler = (event) => {\n        const doValue = event.target.value;\n        const newTodo = {\n            do: doValue\n        };\n        // change local state todo variable\n        setTodo(newTodo);\n    }\n    // 2 create a dispatch\n    const dispatch = useDispatch();\n    // handle create click event\n    const createTodoClickHandler = () => {\n        const action = {\n            type: 'create-todo',\n            todo\n        };\n        // send action to reducers\n        dispatch(action);\n    }\n    // 3 delete todos event handler accepts todo\n    const deleteTodoClickHandler = (todo) => {\n        // create new action\n        const action = {\n            type: 'delete-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    // 4 handle checkbox click\n    const updateTodoClickHandler = (todo) => {\n        const action = {\n            type: 'update-todo',\n            todo\n        };\n        dispatch(action);\n    }\n    \n    return (\n        <>\n            <h3>Todos</h3>\n            <ul className=\"list-group\">\n                {/*// add a new line item at the top*/}\n                <li className=\"list-group-item\">\n                    <input\n                        onChange={todoChangeHandler}\n                        value={todo.do}\n                        className=\"form-control\"/>\n                    {/*// create button notifies event handler when*/}\n                    <button onClick={createTodoClickHandler}\n                            className=\"btn btn-primary\">\n                        Create New Todos\n                    </button>\n                    {/*// if user clicks on Delete button,\n                    call event handler passing todos instance*/}\n                    <button onClick={() =>\n                        deleteTodoClickHandler(todo)}\n                            className=\"btn btn-danger float-end\">\n                        Delete\n                    </button>\n                \n                </li>\n                \n                {\n                    todos.map(todo =>\n                        <li className=\"list-group-item\">\n                            {/*create a checkbox, show checked if done=true*/}\n                            <input checked={todo.done}\n                                   onChange={(event) =>\n                                       updateTodoClickHandler(\n                                           {...todo,\n                                               done: event.target.checked})}\n                                   type=\"checkbox\"/>\n                            {todo.do}\n                        </li>\n                    )\n                }\n            </ul>\n        </>\n    );\n};\nexport default Todos;\n\n"]},"metadata":{},"sourceType":"module"}